// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Course       *course
	GradeClass   *gradeClass
	Role         *role
	Student      *student
	StudentScore *studentScore
	Teacher      *teacher
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Course = &Q.Course
	GradeClass = &Q.GradeClass
	Role = &Q.Role
	Student = &Q.Student
	StudentScore = &Q.StudentScore
	Teacher = &Q.Teacher
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Course:       newCourse(db, opts...),
		GradeClass:   newGradeClass(db, opts...),
		Role:         newRole(db, opts...),
		Student:      newStudent(db, opts...),
		StudentScore: newStudentScore(db, opts...),
		Teacher:      newTeacher(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Course       course
	GradeClass   gradeClass
	Role         role
	Student      student
	StudentScore studentScore
	Teacher      teacher
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Course:       q.Course.clone(db),
		GradeClass:   q.GradeClass.clone(db),
		Role:         q.Role.clone(db),
		Student:      q.Student.clone(db),
		StudentScore: q.StudentScore.clone(db),
		Teacher:      q.Teacher.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Course:       q.Course.replaceDB(db),
		GradeClass:   q.GradeClass.replaceDB(db),
		Role:         q.Role.replaceDB(db),
		Student:      q.Student.replaceDB(db),
		StudentScore: q.StudentScore.replaceDB(db),
		Teacher:      q.Teacher.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Course       ICourseDo
	GradeClass   IGradeClassDo
	Role         IRoleDo
	Student      IStudentDo
	StudentScore IStudentScoreDo
	Teacher      ITeacherDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Course:       q.Course.WithContext(ctx),
		GradeClass:   q.GradeClass.WithContext(ctx),
		Role:         q.Role.WithContext(ctx),
		Student:      q.Student.WithContext(ctx),
		StudentScore: q.StudentScore.WithContext(ctx),
		Teacher:      q.Teacher.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
