// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xuedengwang/dal/model"
)

func newStudentScore(db *gorm.DB, opts ...gen.DOOption) studentScore {
	_studentScore := studentScore{}

	_studentScore.studentScoreDo.UseDB(db, opts...)
	_studentScore.studentScoreDo.UseModel(&model.StudentScore{})

	tableName := _studentScore.studentScoreDo.TableName()
	_studentScore.ALL = field.NewAsterisk(tableName)
	_studentScore.ID = field.NewInt64(tableName, "id")
	_studentScore.CreateBy = field.NewInt64(tableName, "create_by")
	_studentScore.CreateTime = field.NewTime(tableName, "create_time")
	_studentScore.Remarks = field.NewString(tableName, "remarks")
	_studentScore.UpdateBy = field.NewInt64(tableName, "update_by")
	_studentScore.UpdateTime = field.NewTime(tableName, "update_time")
	_studentScore.Score = field.NewFloat32(tableName, "score")
	_studentScore.Type = field.NewString(tableName, "type")
	_studentScore.CourseID = field.NewInt64(tableName, "course_id")
	_studentScore.StudentID = field.NewInt64(tableName, "student_id")
	_studentScore.GradeClassID = field.NewInt64(tableName, "grade_class_id")
	_studentScore.GradeClass = studentScoreHasOneGradeClass{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("GradeClass", "model.GradeClass"),
	}

	_studentScore.Student = studentScoreHasOneStudent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Student", "model.Student"),
	}

	_studentScore.Course = studentScoreHasOneCourse{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Course", "model.Course"),
	}

	_studentScore.fillFieldMap()

	return _studentScore
}

type studentScore struct {
	studentScoreDo studentScoreDo

	ALL          field.Asterisk
	ID           field.Int64
	CreateBy     field.Int64
	CreateTime   field.Time // 创建时间
	Remarks      field.String
	UpdateBy     field.Int64
	UpdateTime   field.Time // 更新时间
	Score        field.Float32
	Type         field.String
	CourseID     field.Int64
	StudentID    field.Int64
	GradeClassID field.Int64
	GradeClass   studentScoreHasOneGradeClass

	Student studentScoreHasOneStudent

	Course studentScoreHasOneCourse

	fieldMap map[string]field.Expr
}

func (s studentScore) Table(newTableName string) *studentScore {
	s.studentScoreDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s studentScore) As(alias string) *studentScore {
	s.studentScoreDo.DO = *(s.studentScoreDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *studentScore) updateTableName(table string) *studentScore {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.Remarks = field.NewString(table, "remarks")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.Score = field.NewFloat32(table, "score")
	s.Type = field.NewString(table, "type")
	s.CourseID = field.NewInt64(table, "course_id")
	s.StudentID = field.NewInt64(table, "student_id")
	s.GradeClassID = field.NewInt64(table, "grade_class_id")

	s.fillFieldMap()

	return s
}

func (s *studentScore) WithContext(ctx context.Context) IStudentScoreDo {
	return s.studentScoreDo.WithContext(ctx)
}

func (s studentScore) TableName() string { return s.studentScoreDo.TableName() }

func (s studentScore) Alias() string { return s.studentScoreDo.Alias() }

func (s *studentScore) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *studentScore) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["remarks"] = s.Remarks
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["score"] = s.Score
	s.fieldMap["type"] = s.Type
	s.fieldMap["course_id"] = s.CourseID
	s.fieldMap["student_id"] = s.StudentID
	s.fieldMap["grade_class_id"] = s.GradeClassID

}

func (s studentScore) clone(db *gorm.DB) studentScore {
	s.studentScoreDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s studentScore) replaceDB(db *gorm.DB) studentScore {
	s.studentScoreDo.ReplaceDB(db)
	return s
}

type studentScoreHasOneGradeClass struct {
	db *gorm.DB

	field.RelationField
}

func (a studentScoreHasOneGradeClass) Where(conds ...field.Expr) *studentScoreHasOneGradeClass {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a studentScoreHasOneGradeClass) WithContext(ctx context.Context) *studentScoreHasOneGradeClass {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a studentScoreHasOneGradeClass) Model(m *model.StudentScore) *studentScoreHasOneGradeClassTx {
	return &studentScoreHasOneGradeClassTx{a.db.Model(m).Association(a.Name())}
}

type studentScoreHasOneGradeClassTx struct{ tx *gorm.Association }

func (a studentScoreHasOneGradeClassTx) Find() (result *model.GradeClass, err error) {
	return result, a.tx.Find(&result)
}

func (a studentScoreHasOneGradeClassTx) Append(values ...*model.GradeClass) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a studentScoreHasOneGradeClassTx) Replace(values ...*model.GradeClass) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a studentScoreHasOneGradeClassTx) Delete(values ...*model.GradeClass) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a studentScoreHasOneGradeClassTx) Clear() error {
	return a.tx.Clear()
}

func (a studentScoreHasOneGradeClassTx) Count() int64 {
	return a.tx.Count()
}

type studentScoreHasOneStudent struct {
	db *gorm.DB

	field.RelationField
}

func (a studentScoreHasOneStudent) Where(conds ...field.Expr) *studentScoreHasOneStudent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a studentScoreHasOneStudent) WithContext(ctx context.Context) *studentScoreHasOneStudent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a studentScoreHasOneStudent) Model(m *model.StudentScore) *studentScoreHasOneStudentTx {
	return &studentScoreHasOneStudentTx{a.db.Model(m).Association(a.Name())}
}

type studentScoreHasOneStudentTx struct{ tx *gorm.Association }

func (a studentScoreHasOneStudentTx) Find() (result *model.Student, err error) {
	return result, a.tx.Find(&result)
}

func (a studentScoreHasOneStudentTx) Append(values ...*model.Student) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a studentScoreHasOneStudentTx) Replace(values ...*model.Student) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a studentScoreHasOneStudentTx) Delete(values ...*model.Student) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a studentScoreHasOneStudentTx) Clear() error {
	return a.tx.Clear()
}

func (a studentScoreHasOneStudentTx) Count() int64 {
	return a.tx.Count()
}

type studentScoreHasOneCourse struct {
	db *gorm.DB

	field.RelationField
}

func (a studentScoreHasOneCourse) Where(conds ...field.Expr) *studentScoreHasOneCourse {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a studentScoreHasOneCourse) WithContext(ctx context.Context) *studentScoreHasOneCourse {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a studentScoreHasOneCourse) Model(m *model.StudentScore) *studentScoreHasOneCourseTx {
	return &studentScoreHasOneCourseTx{a.db.Model(m).Association(a.Name())}
}

type studentScoreHasOneCourseTx struct{ tx *gorm.Association }

func (a studentScoreHasOneCourseTx) Find() (result *model.Course, err error) {
	return result, a.tx.Find(&result)
}

func (a studentScoreHasOneCourseTx) Append(values ...*model.Course) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a studentScoreHasOneCourseTx) Replace(values ...*model.Course) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a studentScoreHasOneCourseTx) Delete(values ...*model.Course) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a studentScoreHasOneCourseTx) Clear() error {
	return a.tx.Clear()
}

func (a studentScoreHasOneCourseTx) Count() int64 {
	return a.tx.Count()
}

type studentScoreDo struct{ gen.DO }

type IStudentScoreDo interface {
	gen.SubQuery
	Debug() IStudentScoreDo
	WithContext(ctx context.Context) IStudentScoreDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStudentScoreDo
	WriteDB() IStudentScoreDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStudentScoreDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStudentScoreDo
	Not(conds ...gen.Condition) IStudentScoreDo
	Or(conds ...gen.Condition) IStudentScoreDo
	Select(conds ...field.Expr) IStudentScoreDo
	Where(conds ...gen.Condition) IStudentScoreDo
	Order(conds ...field.Expr) IStudentScoreDo
	Distinct(cols ...field.Expr) IStudentScoreDo
	Omit(cols ...field.Expr) IStudentScoreDo
	Join(table schema.Tabler, on ...field.Expr) IStudentScoreDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStudentScoreDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStudentScoreDo
	Group(cols ...field.Expr) IStudentScoreDo
	Having(conds ...gen.Condition) IStudentScoreDo
	Limit(limit int) IStudentScoreDo
	Offset(offset int) IStudentScoreDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStudentScoreDo
	Unscoped() IStudentScoreDo
	Create(values ...*model.StudentScore) error
	CreateInBatches(values []*model.StudentScore, batchSize int) error
	Save(values ...*model.StudentScore) error
	First() (*model.StudentScore, error)
	Take() (*model.StudentScore, error)
	Last() (*model.StudentScore, error)
	Find() ([]*model.StudentScore, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StudentScore, err error)
	FindInBatches(result *[]*model.StudentScore, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StudentScore) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStudentScoreDo
	Assign(attrs ...field.AssignExpr) IStudentScoreDo
	Joins(fields ...field.RelationField) IStudentScoreDo
	Preload(fields ...field.RelationField) IStudentScoreDo
	FirstOrInit() (*model.StudentScore, error)
	FirstOrCreate() (*model.StudentScore, error)
	FindByPage(offset int, limit int) (result []*model.StudentScore, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStudentScoreDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s studentScoreDo) Debug() IStudentScoreDo {
	return s.withDO(s.DO.Debug())
}

func (s studentScoreDo) WithContext(ctx context.Context) IStudentScoreDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s studentScoreDo) ReadDB() IStudentScoreDo {
	return s.Clauses(dbresolver.Read)
}

func (s studentScoreDo) WriteDB() IStudentScoreDo {
	return s.Clauses(dbresolver.Write)
}

func (s studentScoreDo) Session(config *gorm.Session) IStudentScoreDo {
	return s.withDO(s.DO.Session(config))
}

func (s studentScoreDo) Clauses(conds ...clause.Expression) IStudentScoreDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s studentScoreDo) Returning(value interface{}, columns ...string) IStudentScoreDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s studentScoreDo) Not(conds ...gen.Condition) IStudentScoreDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s studentScoreDo) Or(conds ...gen.Condition) IStudentScoreDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s studentScoreDo) Select(conds ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s studentScoreDo) Where(conds ...gen.Condition) IStudentScoreDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s studentScoreDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStudentScoreDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s studentScoreDo) Order(conds ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s studentScoreDo) Distinct(cols ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s studentScoreDo) Omit(cols ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s studentScoreDo) Join(table schema.Tabler, on ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s studentScoreDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s studentScoreDo) RightJoin(table schema.Tabler, on ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s studentScoreDo) Group(cols ...field.Expr) IStudentScoreDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s studentScoreDo) Having(conds ...gen.Condition) IStudentScoreDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s studentScoreDo) Limit(limit int) IStudentScoreDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s studentScoreDo) Offset(offset int) IStudentScoreDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s studentScoreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStudentScoreDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s studentScoreDo) Unscoped() IStudentScoreDo {
	return s.withDO(s.DO.Unscoped())
}

func (s studentScoreDo) Create(values ...*model.StudentScore) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s studentScoreDo) CreateInBatches(values []*model.StudentScore, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s studentScoreDo) Save(values ...*model.StudentScore) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s studentScoreDo) First() (*model.StudentScore, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StudentScore), nil
	}
}

func (s studentScoreDo) Take() (*model.StudentScore, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StudentScore), nil
	}
}

func (s studentScoreDo) Last() (*model.StudentScore, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StudentScore), nil
	}
}

func (s studentScoreDo) Find() ([]*model.StudentScore, error) {
	result, err := s.DO.Find()
	return result.([]*model.StudentScore), err
}

func (s studentScoreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StudentScore, err error) {
	buf := make([]*model.StudentScore, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s studentScoreDo) FindInBatches(result *[]*model.StudentScore, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s studentScoreDo) Attrs(attrs ...field.AssignExpr) IStudentScoreDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s studentScoreDo) Assign(attrs ...field.AssignExpr) IStudentScoreDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s studentScoreDo) Joins(fields ...field.RelationField) IStudentScoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s studentScoreDo) Preload(fields ...field.RelationField) IStudentScoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s studentScoreDo) FirstOrInit() (*model.StudentScore, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StudentScore), nil
	}
}

func (s studentScoreDo) FirstOrCreate() (*model.StudentScore, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StudentScore), nil
	}
}

func (s studentScoreDo) FindByPage(offset int, limit int) (result []*model.StudentScore, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s studentScoreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s studentScoreDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s studentScoreDo) Delete(models ...*model.StudentScore) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *studentScoreDo) withDO(do gen.Dao) *studentScoreDo {
	s.DO = *do.(*gen.DO)
	return s
}
