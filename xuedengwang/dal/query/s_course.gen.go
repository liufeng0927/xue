// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"xuedengwang/dal/model"
)

func newCourse(db *gorm.DB, opts ...gen.DOOption) course {
	_course := course{}

	_course.courseDo.UseDB(db, opts...)
	_course.courseDo.UseModel(&model.Course{})

	tableName := _course.courseDo.TableName()
	_course.ALL = field.NewAsterisk(tableName)
	_course.ID = field.NewInt64(tableName, "id")
	_course.CreateBy = field.NewInt64(tableName, "create_by")
	_course.CreateTime = field.NewTime(tableName, "create_time")
	_course.Remarks = field.NewString(tableName, "remarks")
	_course.UpdateBy = field.NewInt64(tableName, "update_by")
	_course.UpdateTime = field.NewTime(tableName, "update_time")
	_course.CourseName = field.NewString(tableName, "course_name")
	_course.CourseNo = field.NewString(tableName, "course_no")

	_course.fillFieldMap()

	return _course
}

type course struct {
	courseDo courseDo

	ALL        field.Asterisk
	ID         field.Int64
	CreateBy   field.Int64
	CreateTime field.Time // 创建时间
	Remarks    field.String
	UpdateBy   field.Int64
	UpdateTime field.Time // 更新时间
	CourseName field.String
	CourseNo   field.String

	fieldMap map[string]field.Expr
}

func (c course) Table(newTableName string) *course {
	c.courseDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c course) As(alias string) *course {
	c.courseDo.DO = *(c.courseDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *course) updateTableName(table string) *course {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreateBy = field.NewInt64(table, "create_by")
	c.CreateTime = field.NewTime(table, "create_time")
	c.Remarks = field.NewString(table, "remarks")
	c.UpdateBy = field.NewInt64(table, "update_by")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.CourseName = field.NewString(table, "course_name")
	c.CourseNo = field.NewString(table, "course_no")

	c.fillFieldMap()

	return c
}

func (c *course) WithContext(ctx context.Context) ICourseDo { return c.courseDo.WithContext(ctx) }

func (c course) TableName() string { return c.courseDo.TableName() }

func (c course) Alias() string { return c.courseDo.Alias() }

func (c *course) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *course) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["remarks"] = c.Remarks
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["course_name"] = c.CourseName
	c.fieldMap["course_no"] = c.CourseNo
}

func (c course) clone(db *gorm.DB) course {
	c.courseDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c course) replaceDB(db *gorm.DB) course {
	c.courseDo.ReplaceDB(db)
	return c
}

type courseDo struct{ gen.DO }

type ICourseDo interface {
	gen.SubQuery
	Debug() ICourseDo
	WithContext(ctx context.Context) ICourseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICourseDo
	WriteDB() ICourseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICourseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICourseDo
	Not(conds ...gen.Condition) ICourseDo
	Or(conds ...gen.Condition) ICourseDo
	Select(conds ...field.Expr) ICourseDo
	Where(conds ...gen.Condition) ICourseDo
	Order(conds ...field.Expr) ICourseDo
	Distinct(cols ...field.Expr) ICourseDo
	Omit(cols ...field.Expr) ICourseDo
	Join(table schema.Tabler, on ...field.Expr) ICourseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICourseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICourseDo
	Group(cols ...field.Expr) ICourseDo
	Having(conds ...gen.Condition) ICourseDo
	Limit(limit int) ICourseDo
	Offset(offset int) ICourseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseDo
	Unscoped() ICourseDo
	Create(values ...*model.Course) error
	CreateInBatches(values []*model.Course, batchSize int) error
	Save(values ...*model.Course) error
	First() (*model.Course, error)
	Take() (*model.Course, error)
	Last() (*model.Course, error)
	Find() ([]*model.Course, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Course, err error)
	FindInBatches(result *[]*model.Course, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Course) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICourseDo
	Assign(attrs ...field.AssignExpr) ICourseDo
	Joins(fields ...field.RelationField) ICourseDo
	Preload(fields ...field.RelationField) ICourseDo
	FirstOrInit() (*model.Course, error)
	FirstOrCreate() (*model.Course, error)
	FindByPage(offset int, limit int) (result []*model.Course, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICourseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c courseDo) Debug() ICourseDo {
	return c.withDO(c.DO.Debug())
}

func (c courseDo) WithContext(ctx context.Context) ICourseDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseDo) ReadDB() ICourseDo {
	return c.Clauses(dbresolver.Read)
}

func (c courseDo) WriteDB() ICourseDo {
	return c.Clauses(dbresolver.Write)
}

func (c courseDo) Session(config *gorm.Session) ICourseDo {
	return c.withDO(c.DO.Session(config))
}

func (c courseDo) Clauses(conds ...clause.Expression) ICourseDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseDo) Returning(value interface{}, columns ...string) ICourseDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseDo) Not(conds ...gen.Condition) ICourseDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseDo) Or(conds ...gen.Condition) ICourseDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseDo) Select(conds ...field.Expr) ICourseDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseDo) Where(conds ...gen.Condition) ICourseDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICourseDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c courseDo) Order(conds ...field.Expr) ICourseDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseDo) Distinct(cols ...field.Expr) ICourseDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseDo) Omit(cols ...field.Expr) ICourseDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseDo) Join(table schema.Tabler, on ...field.Expr) ICourseDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICourseDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseDo) RightJoin(table schema.Tabler, on ...field.Expr) ICourseDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseDo) Group(cols ...field.Expr) ICourseDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseDo) Having(conds ...gen.Condition) ICourseDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseDo) Limit(limit int) ICourseDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseDo) Offset(offset int) ICourseDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseDo) Unscoped() ICourseDo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseDo) Create(values ...*model.Course) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseDo) CreateInBatches(values []*model.Course, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseDo) Save(values ...*model.Course) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseDo) First() (*model.Course, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Course), nil
	}
}

func (c courseDo) Take() (*model.Course, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Course), nil
	}
}

func (c courseDo) Last() (*model.Course, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Course), nil
	}
}

func (c courseDo) Find() ([]*model.Course, error) {
	result, err := c.DO.Find()
	return result.([]*model.Course), err
}

func (c courseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Course, err error) {
	buf := make([]*model.Course, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseDo) FindInBatches(result *[]*model.Course, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseDo) Attrs(attrs ...field.AssignExpr) ICourseDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseDo) Assign(attrs ...field.AssignExpr) ICourseDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseDo) Joins(fields ...field.RelationField) ICourseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseDo) Preload(fields ...field.RelationField) ICourseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseDo) FirstOrInit() (*model.Course, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Course), nil
	}
}

func (c courseDo) FirstOrCreate() (*model.Course, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Course), nil
	}
}

func (c courseDo) FindByPage(offset int, limit int) (result []*model.Course, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseDo) Delete(models ...*model.Course) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseDo) withDO(do gen.Dao) *courseDo {
	c.DO = *do.(*gen.DO)
	return c
}
