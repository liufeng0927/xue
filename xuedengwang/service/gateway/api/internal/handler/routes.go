// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	course "xuedengwang/service/gateway/api/internal/handler/course"
	gradeclass "xuedengwang/service/gateway/api/internal/handler/gradeclass"
	role "xuedengwang/service/gateway/api/internal/handler/role"
	scores "xuedengwang/service/gateway/api/internal/handler/scores"
	student "xuedengwang/service/gateway/api/internal/handler/student"
	sys "xuedengwang/service/gateway/api/internal/handler/sys"
	teacher "xuedengwang/service/gateway/api/internal/handler/teacher"
	user "xuedengwang/service/gateway/api/internal/handler/user"
	"xuedengwang/service/gateway/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: sys.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/loginOut",
				Handler: sys.LogoutHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/home",
					Handler: user.HomeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user",
					Handler: user.GetUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user",
					Handler: user.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/:id",
					Handler: user.GetUserByIDHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/:id",
					Handler: user.DeleteUserByIDHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/userIcon",
				Handler: user.UserIconHandler(serverCtx),
			},
		},
		rest.WithPrefix("/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/updateInfo",
					Handler: user.UpdateInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/updatePwd",
					Handler: user.UpdatePwdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sendEmail",
					Handler: user.SendEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/verifyCode",
					Handler: user.VerifyCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/updateEmail",
					Handler: user.UpdateEmailHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/role/all",
					Handler: role.RoleAllHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/role",
					Handler: role.GetRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/role/:id",
					Handler: role.GetRoleByIDHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/role",
					Handler: role.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role",
					Handler: role.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/role/:id",
					Handler: role.DeleteRoleByIDHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/gradeclass/all",
					Handler: gradeclass.GradeclassAllHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/gradeclass",
					Handler: gradeclass.GetGradeclassHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/gradeclass/:id",
					Handler: gradeclass.GetGradeclassByIDHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/gradeclass",
					Handler: gradeclass.UpdateGradeclassHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/gradeclass",
					Handler: gradeclass.AddGradeclassHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/gradeclass/:id",
					Handler: gradeclass.DeleteGradeclassByIDHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/course/all",
					Handler: course.CourseAllHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/course",
					Handler: course.GetCourseHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/course/:id",
					Handler: course.GetCourseByIDHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/course",
					Handler: course.UpdateCourseHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/course",
					Handler: course.AddCourseHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/course/:id",
					Handler: course.DeleteCourseByIDHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/student",
					Handler: student.GetStudentHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/student/:id",
					Handler: student.GetStudentByIDHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/student",
					Handler: student.UpdateStudentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/student",
					Handler: student.AddStudentHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/student/:id",
					Handler: student.DeleteStudentByIDHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/teacher",
					Handler: teacher.GetTeacherHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/teacher/:id",
					Handler: teacher.GetTeacherByIDHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/teacher",
					Handler: teacher.UpdateTeacherHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/teacher",
					Handler: teacher.AddTeacherHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/teacher/:id",
					Handler: teacher.DeleteTeacherByIDHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/scores",
					Handler: scores.GetScoresHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/scores",
					Handler: scores.UpdateScoresHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/scores",
					Handler: scores.AddScoresHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/scores/:id",
					Handler: scores.DeleteScoresIDHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/scores/getScoreCensus",
					Handler: scores.GetScoreCensusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/scores/getScoresContrastCensus",
					Handler: scores.GetScoresContrastCensusHandler(serverCtx),
				},
			}...,
		),
	)
}
