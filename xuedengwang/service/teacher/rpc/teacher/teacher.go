// Code generated by goctl. DO NOT EDIT!
// Source: teacher.proto

package teacher

import (
	"context"

	"xuedengwang/service/teacher/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddTeacherReq        = pb.AddTeacherReq
	DeleteTeacherByIDReq = pb.DeleteTeacherByIDReq
	GetTeacherByIDReq    = pb.GetTeacherByIDReq
	GetTeacherByIDResp   = pb.GetTeacherByIDResp
	GetTeacherReq        = pb.GetTeacherReq
	GetTeacherResp       = pb.GetTeacherResp
	TeacherDao           = pb.TeacherDao
	TeacherInterface     = pb.TeacherInterface
	UpdateTeacherReq     = pb.UpdateTeacherReq

	Teacher interface {
		GetTeacher(ctx context.Context, in *GetTeacherReq, opts ...grpc.CallOption) (*GetTeacherResp, error)
		GetTeacherByID(ctx context.Context, in *GetTeacherByIDReq, opts ...grpc.CallOption) (*GetTeacherByIDResp, error)
		UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error)
		AddTeacher(ctx context.Context, in *AddTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error)
		DeleteTeacherByID(ctx context.Context, in *DeleteTeacherByIDReq, opts ...grpc.CallOption) (*TeacherInterface, error)
	}

	defaultTeacher struct {
		cli zrpc.Client
	}
)

func NewTeacher(cli zrpc.Client) Teacher {
	return &defaultTeacher{
		cli: cli,
	}
}

func (m *defaultTeacher) GetTeacher(ctx context.Context, in *GetTeacherReq, opts ...grpc.CallOption) (*GetTeacherResp, error) {
	client := pb.NewTeacherClient(m.cli.Conn())
	return client.GetTeacher(ctx, in, opts...)
}

func (m *defaultTeacher) GetTeacherByID(ctx context.Context, in *GetTeacherByIDReq, opts ...grpc.CallOption) (*GetTeacherByIDResp, error) {
	client := pb.NewTeacherClient(m.cli.Conn())
	return client.GetTeacherByID(ctx, in, opts...)
}

func (m *defaultTeacher) UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error) {
	client := pb.NewTeacherClient(m.cli.Conn())
	return client.UpdateTeacher(ctx, in, opts...)
}

func (m *defaultTeacher) AddTeacher(ctx context.Context, in *AddTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error) {
	client := pb.NewTeacherClient(m.cli.Conn())
	return client.AddTeacher(ctx, in, opts...)
}

func (m *defaultTeacher) DeleteTeacherByID(ctx context.Context, in *DeleteTeacherByIDReq, opts ...grpc.CallOption) (*TeacherInterface, error) {
	client := pb.NewTeacherClient(m.cli.Conn())
	return client.DeleteTeacherByID(ctx, in, opts...)
}
