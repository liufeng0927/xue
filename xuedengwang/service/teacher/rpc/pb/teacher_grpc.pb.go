// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: teacher.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeacherClient is the client API for Teacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherClient interface {
	GetTeacher(ctx context.Context, in *GetTeacherReq, opts ...grpc.CallOption) (*GetTeacherResp, error)
	GetTeacherByID(ctx context.Context, in *GetTeacherByIDReq, opts ...grpc.CallOption) (*GetTeacherByIDResp, error)
	UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error)
	AddTeacher(ctx context.Context, in *AddTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error)
	DeleteTeacherByID(ctx context.Context, in *DeleteTeacherByIDReq, opts ...grpc.CallOption) (*TeacherInterface, error)
}

type teacherClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherClient(cc grpc.ClientConnInterface) TeacherClient {
	return &teacherClient{cc}
}

func (c *teacherClient) GetTeacher(ctx context.Context, in *GetTeacherReq, opts ...grpc.CallOption) (*GetTeacherResp, error) {
	out := new(GetTeacherResp)
	err := c.cc.Invoke(ctx, "/pb.teacher/getTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) GetTeacherByID(ctx context.Context, in *GetTeacherByIDReq, opts ...grpc.CallOption) (*GetTeacherByIDResp, error) {
	out := new(GetTeacherByIDResp)
	err := c.cc.Invoke(ctx, "/pb.teacher/getTeacherByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error) {
	out := new(TeacherInterface)
	err := c.cc.Invoke(ctx, "/pb.teacher/updateTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) AddTeacher(ctx context.Context, in *AddTeacherReq, opts ...grpc.CallOption) (*TeacherInterface, error) {
	out := new(TeacherInterface)
	err := c.cc.Invoke(ctx, "/pb.teacher/addTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) DeleteTeacherByID(ctx context.Context, in *DeleteTeacherByIDReq, opts ...grpc.CallOption) (*TeacherInterface, error) {
	out := new(TeacherInterface)
	err := c.cc.Invoke(ctx, "/pb.teacher/deleteTeacherByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServer is the server API for Teacher service.
// All implementations must embed UnimplementedTeacherServer
// for forward compatibility
type TeacherServer interface {
	GetTeacher(context.Context, *GetTeacherReq) (*GetTeacherResp, error)
	GetTeacherByID(context.Context, *GetTeacherByIDReq) (*GetTeacherByIDResp, error)
	UpdateTeacher(context.Context, *UpdateTeacherReq) (*TeacherInterface, error)
	AddTeacher(context.Context, *AddTeacherReq) (*TeacherInterface, error)
	DeleteTeacherByID(context.Context, *DeleteTeacherByIDReq) (*TeacherInterface, error)
	mustEmbedUnimplementedTeacherServer()
}

// UnimplementedTeacherServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServer struct {
}

func (UnimplementedTeacherServer) GetTeacher(context.Context, *GetTeacherReq) (*GetTeacherResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacher not implemented")
}
func (UnimplementedTeacherServer) GetTeacherByID(context.Context, *GetTeacherByIDReq) (*GetTeacherByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherByID not implemented")
}
func (UnimplementedTeacherServer) UpdateTeacher(context.Context, *UpdateTeacherReq) (*TeacherInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedTeacherServer) AddTeacher(context.Context, *AddTeacherReq) (*TeacherInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeacher not implemented")
}
func (UnimplementedTeacherServer) DeleteTeacherByID(context.Context, *DeleteTeacherByIDReq) (*TeacherInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacherByID not implemented")
}
func (UnimplementedTeacherServer) mustEmbedUnimplementedTeacherServer() {}

// UnsafeTeacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServer will
// result in compilation errors.
type UnsafeTeacherServer interface {
	mustEmbedUnimplementedTeacherServer()
}

func RegisterTeacherServer(s grpc.ServiceRegistrar, srv TeacherServer) {
	s.RegisterService(&Teacher_ServiceDesc, srv)
}

func _Teacher_GetTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).GetTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.teacher/getTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).GetTeacher(ctx, req.(*GetTeacherReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_GetTeacherByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).GetTeacherByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.teacher/getTeacherByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).GetTeacherByID(ctx, req.(*GetTeacherByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.teacher/updateTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).UpdateTeacher(ctx, req.(*UpdateTeacherReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_AddTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeacherReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).AddTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.teacher/addTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).AddTeacher(ctx, req.(*AddTeacherReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_DeleteTeacherByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).DeleteTeacherByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.teacher/deleteTeacherByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).DeleteTeacherByID(ctx, req.(*DeleteTeacherByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Teacher_ServiceDesc is the grpc.ServiceDesc for Teacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.teacher",
	HandlerType: (*TeacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTeacher",
			Handler:    _Teacher_GetTeacher_Handler,
		},
		{
			MethodName: "getTeacherByID",
			Handler:    _Teacher_GetTeacherByID_Handler,
		},
		{
			MethodName: "updateTeacher",
			Handler:    _Teacher_UpdateTeacher_Handler,
		},
		{
			MethodName: "addTeacher",
			Handler:    _Teacher_AddTeacher_Handler,
		},
		{
			MethodName: "deleteTeacherByID",
			Handler:    _Teacher_DeleteTeacherByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teacher.proto",
}
