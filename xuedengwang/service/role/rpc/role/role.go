// Code generated by goctl. DO NOT EDIT!
// Source: role.proto

package role

import (
	"context"

	"xuedengwang/service/role/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddRoleReq        = pb.AddRoleReq
	DeleteRoleByIDReq = pb.DeleteRoleByIDReq
	GetRoleByIDReq    = pb.GetRoleByIDReq
	GetRoleByIDResp   = pb.GetRoleByIDResp
	GetRoleReq        = pb.GetRoleReq
	GetRoleResp       = pb.GetRoleResp
	RoleAll           = pb.RoleAll
	RoleAllResp       = pb.RoleAllResp
	RoleDao           = pb.RoleDao
	RoleInterface     = pb.RoleInterface
	UpdateRoleReq     = pb.UpdateRoleReq

	Role interface {
		RoleAll(ctx context.Context, in *RoleInterface, opts ...grpc.CallOption) (*RoleAllResp, error)
		GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*GetRoleResp, error)
		GetRoleByID(ctx context.Context, in *GetRoleByIDReq, opts ...grpc.CallOption) (*GetRoleByIDResp, error)
		UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*RoleInterface, error)
		AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*RoleInterface, error)
		DeleteRoleByID(ctx context.Context, in *DeleteRoleByIDReq, opts ...grpc.CallOption) (*RoleInterface, error)
	}

	defaultRole struct {
		cli zrpc.Client
	}
)

func NewRole(cli zrpc.Client) Role {
	return &defaultRole{
		cli: cli,
	}
}

func (m *defaultRole) RoleAll(ctx context.Context, in *RoleInterface, opts ...grpc.CallOption) (*RoleAllResp, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.RoleAll(ctx, in, opts...)
}

func (m *defaultRole) GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*GetRoleResp, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.GetRole(ctx, in, opts...)
}

func (m *defaultRole) GetRoleByID(ctx context.Context, in *GetRoleByIDReq, opts ...grpc.CallOption) (*GetRoleByIDResp, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.GetRoleByID(ctx, in, opts...)
}

func (m *defaultRole) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*RoleInterface, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

func (m *defaultRole) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*RoleInterface, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.AddRole(ctx, in, opts...)
}

func (m *defaultRole) DeleteRoleByID(ctx context.Context, in *DeleteRoleByIDReq, opts ...grpc.CallOption) (*RoleInterface, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.DeleteRoleByID(ctx, in, opts...)
}
