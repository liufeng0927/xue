// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"xuedengwang/service/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserReq        = pb.AddUserReq
	DateTypeName      = pb.DateTypeName
	DeleteUserByIDReq = pb.DeleteUserByIDReq
	GetUserByIDReq    = pb.GetUserByIDReq
	GetUserByIDResp   = pb.GetUserByIDResp
	GetUserReq        = pb.GetUserReq
	GetUserResp       = pb.GetUserResp
	HomeResp          = pb.HomeResp
	LoginReq          = pb.LoginReq
	LoginResp         = pb.LoginResp
	Role              = pb.Role
	Scores            = pb.Scores
	SendEmailReq      = pb.SendEmailReq
	UpdateEmailReq    = pb.UpdateEmailReq
	UpdateInfoReq     = pb.UpdateInfoReq
	UpdatePwdReq      = pb.UpdatePwdReq
	UpdateUserReq     = pb.UpdateUserReq
	UserDao           = pb.UserDao
	UserInterface     = pb.UserInterface
	VerifyCodeReq     = pb.VerifyCodeReq

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Home(ctx context.Context, in *UserInterface, opts ...grpc.CallOption) (*HomeResp, error)
		UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*UserInterface, error)
		UpdatePwd(ctx context.Context, in *UpdatePwdReq, opts ...grpc.CallOption) (*UserInterface, error)
		SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*UserInterface, error)
		VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*UserInterface, error)
		UpdateEmail(ctx context.Context, in *UpdateEmailReq, opts ...grpc.CallOption) (*UserInterface, error)
		GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
		GetUserByID(ctx context.Context, in *GetUserByIDReq, opts ...grpc.CallOption) (*GetUserByIDResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UserInterface, error)
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*UserInterface, error)
		DeleteUserByID(ctx context.Context, in *DeleteUserByIDReq, opts ...grpc.CallOption) (*UserInterface, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Home(ctx context.Context, in *UserInterface, opts ...grpc.CallOption) (*HomeResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Home(ctx, in, opts...)
}

func (m *defaultUser) UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateInfo(ctx, in, opts...)
}

func (m *defaultUser) UpdatePwd(ctx context.Context, in *UpdatePwdReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdatePwd(ctx, in, opts...)
}

func (m *defaultUser) SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SendEmail(ctx, in, opts...)
}

func (m *defaultUser) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.VerifyCode(ctx, in, opts...)
}

func (m *defaultUser) UpdateEmail(ctx context.Context, in *UpdateEmailReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateEmail(ctx, in, opts...)
}

func (m *defaultUser) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) GetUserByID(ctx context.Context, in *GetUserByIDReq, opts ...grpc.CallOption) (*GetUserByIDResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserByID(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUser) DeleteUserByID(ctx context.Context, in *DeleteUserByIDReq, opts ...grpc.CallOption) (*UserInterface, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteUserByID(ctx, in, opts...)
}
