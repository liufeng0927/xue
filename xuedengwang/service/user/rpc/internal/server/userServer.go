// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"xuedengwang/service/user/rpc/internal/logic"
	"xuedengwang/service/user/rpc/internal/svc"
	"xuedengwang/service/user/rpc/pb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) Home(ctx context.Context, in *pb.UserInterface) (*pb.HomeResp, error) {
	l := logic.NewHomeLogic(ctx, s.svcCtx)
	return l.Home(in)
}

func (s *UserServer) UpdateInfo(ctx context.Context, in *pb.UpdateInfoReq) (*pb.UserInterface, error) {
	l := logic.NewUpdateInfoLogic(ctx, s.svcCtx)
	return l.UpdateInfo(in)
}

func (s *UserServer) UpdatePwd(ctx context.Context, in *pb.UpdatePwdReq) (*pb.UserInterface, error) {
	l := logic.NewUpdatePwdLogic(ctx, s.svcCtx)
	return l.UpdatePwd(in)
}

func (s *UserServer) SendEmail(ctx context.Context, in *pb.SendEmailReq) (*pb.UserInterface, error) {
	l := logic.NewSendEmailLogic(ctx, s.svcCtx)
	return l.SendEmail(in)
}

func (s *UserServer) VerifyCode(ctx context.Context, in *pb.VerifyCodeReq) (*pb.UserInterface, error) {
	l := logic.NewVerifyCodeLogic(ctx, s.svcCtx)
	return l.VerifyCode(in)
}

func (s *UserServer) UpdateEmail(ctx context.Context, in *pb.UpdateEmailReq) (*pb.UserInterface, error) {
	l := logic.NewUpdateEmailLogic(ctx, s.svcCtx)
	return l.UpdateEmail(in)
}

func (s *UserServer) GetUser(ctx context.Context, in *pb.GetUserReq) (*pb.GetUserResp, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *UserServer) GetUserByID(ctx context.Context, in *pb.GetUserByIDReq) (*pb.GetUserByIDResp, error) {
	l := logic.NewGetUserByIDLogic(ctx, s.svcCtx)
	return l.GetUserByID(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *pb.UpdateUserReq) (*pb.UserInterface, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) AddUser(ctx context.Context, in *pb.AddUserReq) (*pb.UserInterface, error) {
	l := logic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

func (s *UserServer) DeleteUserByID(ctx context.Context, in *pb.DeleteUserByIDReq) (*pb.UserInterface, error) {
	l := logic.NewDeleteUserByIDLogic(ctx, s.svcCtx)
	return l.DeleteUserByID(in)
}
