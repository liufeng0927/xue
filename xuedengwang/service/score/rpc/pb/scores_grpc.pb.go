// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: scores.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreClient is the client API for Score service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreClient interface {
	GetScores(ctx context.Context, in *GetScoresReq, opts ...grpc.CallOption) (*GetScoresResp, error)
	UpdateScores(ctx context.Context, in *UpdateScoresReq, opts ...grpc.CallOption) (*ScoresInterface, error)
	AddScores(ctx context.Context, in *AddScoresReq, opts ...grpc.CallOption) (*ScoresInterface, error)
	DeleteScoresByID(ctx context.Context, in *DeleteScoresByIDReq, opts ...grpc.CallOption) (*ScoresInterface, error)
	GetScoreCensus(ctx context.Context, in *GetScoreCensusReq, opts ...grpc.CallOption) (*GetScoreCensusResp, error)
	GetScoresContrastCensus(ctx context.Context, in *GetScoresContrastCensusReq, opts ...grpc.CallOption) (*GetScoresContrastCensusResp, error)
}

type scoreClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreClient(cc grpc.ClientConnInterface) ScoreClient {
	return &scoreClient{cc}
}

func (c *scoreClient) GetScores(ctx context.Context, in *GetScoresReq, opts ...grpc.CallOption) (*GetScoresResp, error) {
	out := new(GetScoresResp)
	err := c.cc.Invoke(ctx, "/pb.Score/getScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) UpdateScores(ctx context.Context, in *UpdateScoresReq, opts ...grpc.CallOption) (*ScoresInterface, error) {
	out := new(ScoresInterface)
	err := c.cc.Invoke(ctx, "/pb.Score/updateScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) AddScores(ctx context.Context, in *AddScoresReq, opts ...grpc.CallOption) (*ScoresInterface, error) {
	out := new(ScoresInterface)
	err := c.cc.Invoke(ctx, "/pb.Score/addScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) DeleteScoresByID(ctx context.Context, in *DeleteScoresByIDReq, opts ...grpc.CallOption) (*ScoresInterface, error) {
	out := new(ScoresInterface)
	err := c.cc.Invoke(ctx, "/pb.Score/deleteScoresByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) GetScoreCensus(ctx context.Context, in *GetScoreCensusReq, opts ...grpc.CallOption) (*GetScoreCensusResp, error) {
	out := new(GetScoreCensusResp)
	err := c.cc.Invoke(ctx, "/pb.Score/getScoreCensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) GetScoresContrastCensus(ctx context.Context, in *GetScoresContrastCensusReq, opts ...grpc.CallOption) (*GetScoresContrastCensusResp, error) {
	out := new(GetScoresContrastCensusResp)
	err := c.cc.Invoke(ctx, "/pb.Score/getScoresContrastCensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServer is the server API for Score service.
// All implementations must embed UnimplementedScoreServer
// for forward compatibility
type ScoreServer interface {
	GetScores(context.Context, *GetScoresReq) (*GetScoresResp, error)
	UpdateScores(context.Context, *UpdateScoresReq) (*ScoresInterface, error)
	AddScores(context.Context, *AddScoresReq) (*ScoresInterface, error)
	DeleteScoresByID(context.Context, *DeleteScoresByIDReq) (*ScoresInterface, error)
	GetScoreCensus(context.Context, *GetScoreCensusReq) (*GetScoreCensusResp, error)
	GetScoresContrastCensus(context.Context, *GetScoresContrastCensusReq) (*GetScoresContrastCensusResp, error)
	mustEmbedUnimplementedScoreServer()
}

// UnimplementedScoreServer must be embedded to have forward compatible implementations.
type UnimplementedScoreServer struct {
}

func (UnimplementedScoreServer) GetScores(context.Context, *GetScoresReq) (*GetScoresResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScores not implemented")
}
func (UnimplementedScoreServer) UpdateScores(context.Context, *UpdateScoresReq) (*ScoresInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScores not implemented")
}
func (UnimplementedScoreServer) AddScores(context.Context, *AddScoresReq) (*ScoresInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScores not implemented")
}
func (UnimplementedScoreServer) DeleteScoresByID(context.Context, *DeleteScoresByIDReq) (*ScoresInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScoresByID not implemented")
}
func (UnimplementedScoreServer) GetScoreCensus(context.Context, *GetScoreCensusReq) (*GetScoreCensusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreCensus not implemented")
}
func (UnimplementedScoreServer) GetScoresContrastCensus(context.Context, *GetScoresContrastCensusReq) (*GetScoresContrastCensusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresContrastCensus not implemented")
}
func (UnimplementedScoreServer) mustEmbedUnimplementedScoreServer() {}

// UnsafeScoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServer will
// result in compilation errors.
type UnsafeScoreServer interface {
	mustEmbedUnimplementedScoreServer()
}

func RegisterScoreServer(s grpc.ServiceRegistrar, srv ScoreServer) {
	s.RegisterService(&Score_ServiceDesc, srv)
}

func _Score_GetScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).GetScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Score/getScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).GetScores(ctx, req.(*GetScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_UpdateScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).UpdateScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Score/updateScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).UpdateScores(ctx, req.(*UpdateScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_AddScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).AddScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Score/addScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).AddScores(ctx, req.(*AddScoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_DeleteScoresByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScoresByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).DeleteScoresByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Score/deleteScoresByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).DeleteScoresByID(ctx, req.(*DeleteScoresByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_GetScoreCensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreCensusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).GetScoreCensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Score/getScoreCensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).GetScoreCensus(ctx, req.(*GetScoreCensusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_GetScoresContrastCensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoresContrastCensusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).GetScoresContrastCensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Score/getScoresContrastCensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).GetScoresContrastCensus(ctx, req.(*GetScoresContrastCensusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Score_ServiceDesc is the grpc.ServiceDesc for Score service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Score_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Score",
	HandlerType: (*ScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getScores",
			Handler:    _Score_GetScores_Handler,
		},
		{
			MethodName: "updateScores",
			Handler:    _Score_UpdateScores_Handler,
		},
		{
			MethodName: "addScores",
			Handler:    _Score_AddScores_Handler,
		},
		{
			MethodName: "deleteScoresByID",
			Handler:    _Score_DeleteScoresByID_Handler,
		},
		{
			MethodName: "getScoreCensus",
			Handler:    _Score_GetScoreCensus_Handler,
		},
		{
			MethodName: "getScoresContrastCensus",
			Handler:    _Score_GetScoresContrastCensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scores.proto",
}
