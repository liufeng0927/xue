// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: course.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClient interface {
	CourseAll(ctx context.Context, in *CourseInterface, opts ...grpc.CallOption) (*CourseAllResp, error)
	GetCourse(ctx context.Context, in *GetCourseReq, opts ...grpc.CallOption) (*GetCourseResp, error)
	GetCourseByID(ctx context.Context, in *GetCourseByIDReq, opts ...grpc.CallOption) (*GetCourseByIDResp, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseReq, opts ...grpc.CallOption) (*CourseInterface, error)
	AddCourse(ctx context.Context, in *AddCourseReq, opts ...grpc.CallOption) (*CourseInterface, error)
	DeleteRCourseByID(ctx context.Context, in *DeleteCourseByIDReq, opts ...grpc.CallOption) (*CourseInterface, error)
}

type courseClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClient(cc grpc.ClientConnInterface) CourseClient {
	return &courseClient{cc}
}

func (c *courseClient) CourseAll(ctx context.Context, in *CourseInterface, opts ...grpc.CallOption) (*CourseAllResp, error) {
	out := new(CourseAllResp)
	err := c.cc.Invoke(ctx, "/pb.course/CourseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) GetCourse(ctx context.Context, in *GetCourseReq, opts ...grpc.CallOption) (*GetCourseResp, error) {
	out := new(GetCourseResp)
	err := c.cc.Invoke(ctx, "/pb.course/getCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) GetCourseByID(ctx context.Context, in *GetCourseByIDReq, opts ...grpc.CallOption) (*GetCourseByIDResp, error) {
	out := new(GetCourseByIDResp)
	err := c.cc.Invoke(ctx, "/pb.course/getCourseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpdateCourse(ctx context.Context, in *UpdateCourseReq, opts ...grpc.CallOption) (*CourseInterface, error) {
	out := new(CourseInterface)
	err := c.cc.Invoke(ctx, "/pb.course/updateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) AddCourse(ctx context.Context, in *AddCourseReq, opts ...grpc.CallOption) (*CourseInterface, error) {
	out := new(CourseInterface)
	err := c.cc.Invoke(ctx, "/pb.course/addCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) DeleteRCourseByID(ctx context.Context, in *DeleteCourseByIDReq, opts ...grpc.CallOption) (*CourseInterface, error) {
	out := new(CourseInterface)
	err := c.cc.Invoke(ctx, "/pb.course/deleteRCourseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
// All implementations must embed UnimplementedCourseServer
// for forward compatibility
type CourseServer interface {
	CourseAll(context.Context, *CourseInterface) (*CourseAllResp, error)
	GetCourse(context.Context, *GetCourseReq) (*GetCourseResp, error)
	GetCourseByID(context.Context, *GetCourseByIDReq) (*GetCourseByIDResp, error)
	UpdateCourse(context.Context, *UpdateCourseReq) (*CourseInterface, error)
	AddCourse(context.Context, *AddCourseReq) (*CourseInterface, error)
	DeleteRCourseByID(context.Context, *DeleteCourseByIDReq) (*CourseInterface, error)
	mustEmbedUnimplementedCourseServer()
}

// UnimplementedCourseServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (UnimplementedCourseServer) CourseAll(context.Context, *CourseInterface) (*CourseAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseAll not implemented")
}
func (UnimplementedCourseServer) GetCourse(context.Context, *GetCourseReq) (*GetCourseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCourseServer) GetCourseByID(context.Context, *GetCourseByIDReq) (*GetCourseByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseByID not implemented")
}
func (UnimplementedCourseServer) UpdateCourse(context.Context, *UpdateCourseReq) (*CourseInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedCourseServer) AddCourse(context.Context, *AddCourseReq) (*CourseInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourse not implemented")
}
func (UnimplementedCourseServer) DeleteRCourseByID(context.Context, *DeleteCourseByIDReq) (*CourseInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRCourseByID not implemented")
}
func (UnimplementedCourseServer) mustEmbedUnimplementedCourseServer() {}

// UnsafeCourseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServer will
// result in compilation errors.
type UnsafeCourseServer interface {
	mustEmbedUnimplementedCourseServer()
}

func RegisterCourseServer(s grpc.ServiceRegistrar, srv CourseServer) {
	s.RegisterService(&Course_ServiceDesc, srv)
}

func _Course_CourseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CourseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.course/CourseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CourseAll(ctx, req.(*CourseInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.course/getCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetCourse(ctx, req.(*GetCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetCourseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetCourseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.course/getCourseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetCourseByID(ctx, req.(*GetCourseByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.course/updateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpdateCourse(ctx, req.(*UpdateCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_AddCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).AddCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.course/addCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).AddCourse(ctx, req.(*AddCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_DeleteRCourseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).DeleteRCourseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.course/deleteRCourseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).DeleteRCourseByID(ctx, req.(*DeleteCourseByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Course_ServiceDesc is the grpc.ServiceDesc for Course service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Course_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CourseAll",
			Handler:    _Course_CourseAll_Handler,
		},
		{
			MethodName: "getCourse",
			Handler:    _Course_GetCourse_Handler,
		},
		{
			MethodName: "getCourseByID",
			Handler:    _Course_GetCourseByID_Handler,
		},
		{
			MethodName: "updateCourse",
			Handler:    _Course_UpdateCourse_Handler,
		},
		{
			MethodName: "addCourse",
			Handler:    _Course_AddCourse_Handler,
		},
		{
			MethodName: "deleteRCourseByID",
			Handler:    _Course_DeleteRCourseByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course.proto",
}
