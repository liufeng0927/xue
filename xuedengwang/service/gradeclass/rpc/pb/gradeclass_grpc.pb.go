// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: gradeclass.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GradeclassClient is the client API for Gradeclass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradeclassClient interface {
	GradeclassAll(ctx context.Context, in *GradeClassInterface, opts ...grpc.CallOption) (*GradeclassAllResp, error)
	GetGradeClass(ctx context.Context, in *GetGradeClassReq, opts ...grpc.CallOption) (*GetGradeClassResp, error)
	GetGradeClassByID(ctx context.Context, in *GetGradeClassByIDReq, opts ...grpc.CallOption) (*GetGradeClassByIDResp, error)
	UpdateGradeClass(ctx context.Context, in *UpdateGradeClassReq, opts ...grpc.CallOption) (*GradeClassInterface, error)
	AddGradeClass(ctx context.Context, in *AddGradeClassReq, opts ...grpc.CallOption) (*GradeClassInterface, error)
	DeleteGradeClassByID(ctx context.Context, in *DeleteGradeClassByIDReq, opts ...grpc.CallOption) (*GradeClassInterface, error)
}

type gradeclassClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeclassClient(cc grpc.ClientConnInterface) GradeclassClient {
	return &gradeclassClient{cc}
}

func (c *gradeclassClient) GradeclassAll(ctx context.Context, in *GradeClassInterface, opts ...grpc.CallOption) (*GradeclassAllResp, error) {
	out := new(GradeclassAllResp)
	err := c.cc.Invoke(ctx, "/pb.gradeclass/gradeclassAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeclassClient) GetGradeClass(ctx context.Context, in *GetGradeClassReq, opts ...grpc.CallOption) (*GetGradeClassResp, error) {
	out := new(GetGradeClassResp)
	err := c.cc.Invoke(ctx, "/pb.gradeclass/getGradeClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeclassClient) GetGradeClassByID(ctx context.Context, in *GetGradeClassByIDReq, opts ...grpc.CallOption) (*GetGradeClassByIDResp, error) {
	out := new(GetGradeClassByIDResp)
	err := c.cc.Invoke(ctx, "/pb.gradeclass/getGradeClassByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeclassClient) UpdateGradeClass(ctx context.Context, in *UpdateGradeClassReq, opts ...grpc.CallOption) (*GradeClassInterface, error) {
	out := new(GradeClassInterface)
	err := c.cc.Invoke(ctx, "/pb.gradeclass/updateGradeClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeclassClient) AddGradeClass(ctx context.Context, in *AddGradeClassReq, opts ...grpc.CallOption) (*GradeClassInterface, error) {
	out := new(GradeClassInterface)
	err := c.cc.Invoke(ctx, "/pb.gradeclass/addGradeClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeclassClient) DeleteGradeClassByID(ctx context.Context, in *DeleteGradeClassByIDReq, opts ...grpc.CallOption) (*GradeClassInterface, error) {
	out := new(GradeClassInterface)
	err := c.cc.Invoke(ctx, "/pb.gradeclass/deleteGradeClassByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeclassServer is the server API for Gradeclass service.
// All implementations must embed UnimplementedGradeclassServer
// for forward compatibility
type GradeclassServer interface {
	GradeclassAll(context.Context, *GradeClassInterface) (*GradeclassAllResp, error)
	GetGradeClass(context.Context, *GetGradeClassReq) (*GetGradeClassResp, error)
	GetGradeClassByID(context.Context, *GetGradeClassByIDReq) (*GetGradeClassByIDResp, error)
	UpdateGradeClass(context.Context, *UpdateGradeClassReq) (*GradeClassInterface, error)
	AddGradeClass(context.Context, *AddGradeClassReq) (*GradeClassInterface, error)
	DeleteGradeClassByID(context.Context, *DeleteGradeClassByIDReq) (*GradeClassInterface, error)
	mustEmbedUnimplementedGradeclassServer()
}

// UnimplementedGradeclassServer must be embedded to have forward compatible implementations.
type UnimplementedGradeclassServer struct {
}

func (UnimplementedGradeclassServer) GradeclassAll(context.Context, *GradeClassInterface) (*GradeclassAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeclassAll not implemented")
}
func (UnimplementedGradeclassServer) GetGradeClass(context.Context, *GetGradeClassReq) (*GetGradeClassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeClass not implemented")
}
func (UnimplementedGradeclassServer) GetGradeClassByID(context.Context, *GetGradeClassByIDReq) (*GetGradeClassByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeClassByID not implemented")
}
func (UnimplementedGradeclassServer) UpdateGradeClass(context.Context, *UpdateGradeClassReq) (*GradeClassInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeClass not implemented")
}
func (UnimplementedGradeclassServer) AddGradeClass(context.Context, *AddGradeClassReq) (*GradeClassInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGradeClass not implemented")
}
func (UnimplementedGradeclassServer) DeleteGradeClassByID(context.Context, *DeleteGradeClassByIDReq) (*GradeClassInterface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeClassByID not implemented")
}
func (UnimplementedGradeclassServer) mustEmbedUnimplementedGradeclassServer() {}

// UnsafeGradeclassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradeclassServer will
// result in compilation errors.
type UnsafeGradeclassServer interface {
	mustEmbedUnimplementedGradeclassServer()
}

func RegisterGradeclassServer(s grpc.ServiceRegistrar, srv GradeclassServer) {
	s.RegisterService(&Gradeclass_ServiceDesc, srv)
}

func _Gradeclass_GradeclassAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeClassInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeclassServer).GradeclassAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gradeclass/gradeclassAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeclassServer).GradeclassAll(ctx, req.(*GradeClassInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gradeclass_GetGradeClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeclassServer).GetGradeClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gradeclass/getGradeClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeclassServer).GetGradeClass(ctx, req.(*GetGradeClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gradeclass_GetGradeClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeClassByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeclassServer).GetGradeClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gradeclass/getGradeClassByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeclassServer).GetGradeClassByID(ctx, req.(*GetGradeClassByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gradeclass_UpdateGradeClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeclassServer).UpdateGradeClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gradeclass/updateGradeClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeclassServer).UpdateGradeClass(ctx, req.(*UpdateGradeClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gradeclass_AddGradeClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGradeClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeclassServer).AddGradeClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gradeclass/addGradeClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeclassServer).AddGradeClass(ctx, req.(*AddGradeClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gradeclass_DeleteGradeClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeClassByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeclassServer).DeleteGradeClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gradeclass/deleteGradeClassByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeclassServer).DeleteGradeClassByID(ctx, req.(*DeleteGradeClassByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gradeclass_ServiceDesc is the grpc.ServiceDesc for Gradeclass service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gradeclass_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.gradeclass",
	HandlerType: (*GradeclassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "gradeclassAll",
			Handler:    _Gradeclass_GradeclassAll_Handler,
		},
		{
			MethodName: "getGradeClass",
			Handler:    _Gradeclass_GetGradeClass_Handler,
		},
		{
			MethodName: "getGradeClassByID",
			Handler:    _Gradeclass_GetGradeClassByID_Handler,
		},
		{
			MethodName: "updateGradeClass",
			Handler:    _Gradeclass_UpdateGradeClass_Handler,
		},
		{
			MethodName: "addGradeClass",
			Handler:    _Gradeclass_AddGradeClass_Handler,
		},
		{
			MethodName: "deleteGradeClassByID",
			Handler:    _Gradeclass_DeleteGradeClassByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gradeclass.proto",
}
